// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: todo.sql

package store

import (
	"context"
	"time"
)

const createTodo = `-- name: CreateTodo :exec
insert into todos(content) values ($1)
`

func (q *Queries) CreateTodo(ctx context.Context, content string) error {
	_, err := q.db.ExecContext(ctx, createTodo, content)
	return err
}

const deleteTodo = `-- name: DeleteTodo :exec
update todos set is_deleted = true where id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodos = `-- name: GetTodos :many
select id, content, completed, create_at from todos where is_deleted = false order by id
`

type GetTodosRow struct {
	ID        int32
	Content   string
	Completed bool
	CreateAt  time.Time
}

func (q *Queries) GetTodos(ctx context.Context) ([]GetTodosRow, error) {
	rows, err := q.db.QueryContext(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTodosRow
	for rows.Next() {
		var i GetTodosRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Completed,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodoCompleted = `-- name: UpdateTodoCompleted :exec
update todos set completed = not completed where id = $1 and is_deleted = false
`

func (q *Queries) UpdateTodoCompleted(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, updateTodoCompleted, id)
	return err
}
